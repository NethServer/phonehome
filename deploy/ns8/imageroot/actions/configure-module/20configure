#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os

data = json.load(sys.stdin)

# Get data from request, set optional parameters
hostname = data.get("hostname")
geoip_token = data.get("geoip_token")
log_level = data.get("log_level", "warning")
debug = data.get("debug", False)
http_to_https = data.get("http_to_https")
lets_encrypt = data.get("lets_encrypt")

if http_to_https == True:
    protocol = 'https://'
else:
    protocol = 'http://'

# Talk with agent using file descriptor.
# Setup configuration from user input.
agent.set_env("TRAEFIK_HOST", hostname)
agent.set_env("TRAEFIK_HTTP2HTTPS", http_to_https)
agent.set_env("TRAEFIK_LETS_ENCRYPT", lets_encrypt)

agent.set_env('APP_DEBUG', debug)
agent.set_env('APP_URL', protocol + hostname)
agent.set_env('APP_DOMAIN', hostname)
agent.set_env('LOG_LEVEL', log_level)
agent.set_env('GEOIP_TOKEN', geoip_token)

# TODO: do something with the request payload. For example configure a
# custom route in our web router. Here the path is hardcoded as
# 'kickstart'.

# Configure Traefik to route "/kickstart" path requests to the kickstart service
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url':  'http://127.0.0.1:' + os.environ["TCP_PORT"],
        'http2https': http_to_https,
        'lets_encrypt': lets_encrypt,
        'host': hostname
    },
)

# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)
